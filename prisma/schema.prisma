generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Game progress
  hearts         Int      @default(5)
  xp             Int      @default(0)
  totalXp        Int      @default(0)
  streak         Int      @default(0)
  gems           Int      @default(100)
  currentStage   Int      @default(1)
  currentSubStage Int     @default(1)
  lastPlayDate   DateTime?
  
  // 青楓館式カリキュラム進捗指標
  speakingCount   Int      @default(0) // 声を出した回数
  practiceCount   Int      @default(0) // 使った回数（練習回数）
  missionCount    Int      @default(0) // 行動回数（ミッション完了回数）
  currentPhase    Int      @default(1) // 現在のフェーズ
  motivationLevel Int      @default(1) // モチベーションレベル (1-5)
  pronunciationScore Float @default(0.0) // 発音スコア平均
  
  // Completed lessons
  completedLessons UserLesson[]
  missions         Mission[]
  speechRecords    SpeechRecord[]
  
  @@map("users")
}

model Lesson {
  id       Int    @id @default(autoincrement())
  stage    Int
  subStage Int
  title    String
  
  questions Question[]
  completedBy UserLesson[]
  
  @@unique([stage, subStage])
  @@map("lessons")
}

model Question {
  id           Int          @id @default(autoincrement())
  lessonId     Int
  questionType QuestionType
  json         Json // Stores question data as JSON
  
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@map("questions")
}

model UserLesson {
  id       String @id @default(cuid())
  userId   String
  lessonId Int
  score    Int    @default(0)
  mistakes Int    @default(0)
  completedAt DateTime @default(now())
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("user_lessons")
}

// 青楓館式カリキュラム - ミッションシステム
model Mission {
  id          Int      @id @default(autoincrement())
  label       String   // 例: "英語が必要なバイトに挑戦"
  description String?
  category    MissionCategory
  phase       Int      // 対象フェーズ
  difficulty  Int      @default(1) // 1-5 難易度
  reward      Int      @default(10) // 報酬XP
  isDone      Boolean  @default(false)
  completedAt DateTime?
  userId      String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("missions")
}

// 青楓館式カリキュラム - 発音記録システム
model SpeechRecord {
  id             Int      @id @default(autoincrement())
  userId         String
  phrase         String   // 練習したフレーズ
  audioUrl       String?  // 音声ファイルのURL
  pitchScore     Float?   // ピッチスコア
  volumeScore    Float?   // 音量スコア
  stabilityScore Float?   // 安定性スコア
  overallScore   Float    // 総合スコア
  feedback       String?  // AIフィードバック
  recordedAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("speech_records")
}

// 青楓館式カリキュラム - フェーズ・ステージ情報
model CurriculumStage {
  id          Int    @id @default(autoincrement())
  phase       Int    // フェーズ番号 (1-6)
  stage       Int    // ステージ番号
  title       String // ステージタイトル
  description String // ステージ説明
  goal        String // 学習目標
  phrases     Json   // 重要フレーズ配列
  isUnlocked  Boolean @default(false)
  
  @@unique([phase, stage])
  @@map("curriculum_stages")
}

enum QuestionType {
  MEANING_MC
  WORD_ORDER  
  TYPE_HEAR
  PIC_MATCH
  LISTENING_MC
  PHONETIC_PRACTICE    // 発音練習
  SENTENCE_SPEAKING    // 文章読み上げ
  MISSION_PRACTICE     // ミッション練習
}

enum MissionCategory {
  DAILY_LIFE      // 日常生活
  WORK_STUDY      // 仕事・勉強
  SOCIAL          // 社交
  TRAVEL          // 旅行
  BUSINESS        // ビジネス
  CREATIVE        // 創作活動
}
